<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
    <w:body>
        <w:p>
            <w:pPr>
                <w:pStyle w:val="code"/>
            </w:pPr>
            <w:r>
                <w:t><![CDATA[classdef dtmf < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        DTMFDemoUIFigure        matlab.ui.Figure
        GridLayout              matlab.ui.container.GridLayout
        LeftPanel               matlab.ui.container.Panel
        GridLayout4             matlab.ui.container.GridLayout
        UIAxes_org_signal       matlab.ui.control.UIAxes
        UIAxes2_noisy_signal    matlab.ui.control.UIAxes
        UIAxes3_freq            matlab.ui.control.UIAxes
        RightPanel              matlab.ui.container.Panel
        GridLayout2             matlab.ui.container.GridLayout
        GridLayout3             matlab.ui.container.GridLayout
        Button_1                matlab.ui.control.Button
        Button_2                matlab.ui.control.Button
        Button_3                matlab.ui.control.Button
        Button_A                matlab.ui.control.Button
        Button_4                matlab.ui.control.Button
        Button_5                matlab.ui.control.Button
        Button_6                matlab.ui.control.Button
        Button_B                matlab.ui.control.Button
        Button_7                matlab.ui.control.Button
        Button_8                matlab.ui.control.Button
        Button_9                matlab.ui.control.Button
        Button_C                matlab.ui.control.Button
        Button_asterisk         matlab.ui.control.Button
        Button_0                matlab.ui.control.Button
        Button_pound            matlab.ui.control.Button
        Button_D                matlab.ui.control.Button
        Panel                   matlab.ui.container.Panel
        SetSNRdBLabel           matlab.ui.control.Label
        SetSNRdB                matlab.ui.control.NumericEditField
        InputEditFieldLabel     matlab.ui.control.Label
        InputKey                matlab.ui.control.EditField
        DetectedLabel           matlab.ui.control.Label
        DetectedKey             matlab.ui.control.EditField
        f_lowHzLabel            matlab.ui.control.Label
        f_low                   matlab.ui.control.NumericEditField
        f_highHzLabel           matlab.ui.control.Label
        f_high                  matlab.ui.control.NumericEditField
        f_lowHzEditFieldLabel   matlab.ui.control.Label
        f_lowHzEditField        matlab.ui.control.NumericEditField
        f_highHzEditFieldLabel  matlab.ui.control.Label
        f_highHzEditField       matlab.ui.control.NumericEditField
        MinPkHeightLabel        matlab.ui.control.Label
        MinPkHeightEditField    matlab.ui.control.NumericEditField
        AlgorithmsButtonGroup   matlab.ui.container.ButtonGroup
        fftButton               matlab.ui.control.RadioButton
        goertzelButton          matlab.ui.control.RadioButton
    end

    % Properties that correspond to apps with auto-reflow
    properties (Access = private)
        onePanelWidth = 576;
    end

    
    properties (Access = private)
        fs = 8000; % 采样率
        freq_table = [697, 770, 852, 941; 1209, 1336, 1447, 1633]; % 信号频率lut
        key_table = ["key 1","key 2","key 3","key A";...
            "key 4","key 5","key 6","key B";...
            "key 7","key 8","key 9","key C";...
            "key *","key 0","key #","key D"]; % 按键lut
        time = 0.1; % 信号持续时间（秒）
        signal = []; % 原始信号
        noisy_signal = []; % 加噪信号
        SNRdB = 6; % 信噪比（dB）
        min_pk_dis = 230;
        min_pk_height = 200;
        freq_swing = 0.015; % 允许接收频偏
    end
    
    methods (Access = private)
        
        function creat_signal(app,low,high)
            n = 0:1/app.fs:app.time;
            app.signal=cos(2*pi*app.freq_table(1,low).*n)+...
                cos(2*pi*app.freq_table(2,high).*n);
            plot(app.UIAxes_org_signal,app.signal)            
            app.f_low.Value = app.freq_table(1,low);
            app.f_high.Value = app.freq_table(2,high);
        end
        
        function add_noise(app)
            app.noisy_signal=awgn(app.signal,app.SNRdB,'measured');
            plot(app.UIAxes2_noisy_signal,app.noisy_signal)
        end
        
        function detect_signal(app)
            n = 0:1/app.fs:app.time;
            n_length = length(n);
            fl=0;
            fh=0;
            if app.fftButton.Value==1
                f = (0:n_length-1)/n_length*app.fs;
                S = fft(app.noisy_signal);
                [pks,locs]=findpeaks(abs(S(1:(n_length-1)/2)),f(1:(n_length-1)/2),...
                    "MinPeakDistance",app.min_pk_dis,...
                    "MinPeakHeight",app.min_pk_height); % 寻找单侧频谱峰值点
                plot(app.UIAxes3_freq,f,abs(S),locs,pks,'v',...
                    [0,f(end)],[app.min_pk_height,app.min_pk_height],'--')
                text(app.UIAxes3_freq,locs,pks,num2str(locs'))
                text(app.UIAxes3_freq,0,app.min_pk_height,num2str(app.min_pk_height))
                if length(locs)==2
                    if locs(2)>app.freq_table(2,1)*(1-app.freq_swing)&&...
                            locs(2)<app.freq_table(2,1)*(1+app.freq_swing)
                        fh=1;
                    elseif locs(2)>app.freq_table(2,2)*(1-app.freq_swing)&&...
                            locs(2)<app.freq_table(2,2)*(1+app.freq_swing)
                        fh=2;
                    elseif locs(2)>app.freq_table(2,3)*(1-app.freq_swing)&&...
                            locs(2)<app.freq_table(2,3)*(1+app.freq_swing)
                        fh=3;
                    elseif locs(2)>app.freq_table(2,4)*(1-app.freq_swing)&&...
                            locs(2)<app.freq_table(2,4)*(1+app.freq_swing)
                        fh=4;
                    end % 判断高频群信号
                    if locs(1)>app.freq_table(1,1)*(1-app.freq_swing)&&...
                            locs(1)<app.freq_table(1,1)*(1+app.freq_swing)
                        fl=1;
                    elseif locs(1)>app.freq_table(1,2)*(1-app.freq_swing)&&...
                            locs(1)<app.freq_table(1,2)*(1+app.freq_swing)
                        fl=2;
                    elseif locs(1)>app.freq_table(1,3)*(1-app.freq_swing)&&...
                            locs(1)<app.freq_table(1,3)*(1+app.freq_swing)
                        fl=3;
                    elseif locs(1)>app.freq_table(1,4)*(1-app.freq_swing)&&...
                            locs(1)<app.freq_table(1,4)*(1+app.freq_swing)
                        fl=4;
                    end % 判断低频群信号
                end % fft算法判断信号
            elseif app.goertzelButton.Value==1
                f=[app.freq_table(1,:),app.freq_table(2,:)]; % 矩阵转为行向量
                freq_indices=round(f/app.fs*n_length)+1;
                dft_data=goertzel(app.noisy_signal,freq_indices);
                stem(app.UIAxes3_freq,f,abs(dft_data))
                hold(app.UIAxes3_freq,"on")
                plot(app.UIAxes3_freq,[0,app.fs],[app.min_pk_height,app.min_pk_height],'--')
                hold(app.UIAxes3_freq,"off")                
                text(app.UIAxes3_freq,f,abs(dft_data),num2str(f'))
                text(app.UIAxes3_freq,0,app.min_pk_height,num2str(app.min_pk_height))
                idx=find(abs(dft_data)>app.min_pk_height);
                if length(idx)==2
                    fl=idx(1);
                    fh=idx(2)-4;
                    locs=f(idx);
                end % goertzel算法判断信号
            end
            if fl==0 || fh==0
                app.DetectedKey.Value="none";
                app.f_highHzEditField.Value=0;
                app.f_lowHzEditField.Value=0;
            else
                app.DetectedKey.Value=app.key_table(fl,fh);
                app.f_lowHzEditField.Value=locs(1);
                app.f_highHzEditField.Value=locs(2);
            end % 结果输出
        end
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            app.SetSNRdB.Value = app.SNRdB;
            app.MinPkHeightEditField.Value = app.min_pk_height;
        end

        % Changes arrangement of the app based on UIFigure width
        function updateAppLayout(app, event)
            currentFigureWidth = app.DTMFDemoUIFigure.Position(3);
            if(currentFigureWidth <= app.onePanelWidth)
                % Change to a 2x1 grid
                app.GridLayout.RowHeight = {523, 523};
                app.GridLayout.ColumnWidth = {'1x'};
                app.RightPanel.Layout.Row = 2;
                app.RightPanel.Layout.Column = 1;
            else
                % Change to a 1x2 grid
                app.GridLayout.RowHeight = {'1x'};
                app.GridLayout.ColumnWidth = {441, '1x'};
                app.RightPanel.Layout.Row = 1;
                app.RightPanel.Layout.Column = 2;
            end
        end

        % Value changed function: SetSNRdB
        function SetSNRdBValueChanged(app, event)
            app.SNRdB = app.SetSNRdB.Value;            
        end

        % Value changed function: MinPkHeightEditField
        function MinPkHeightEditFieldValueChanged(app, event)
            app.min_pk_height = app.MinPkHeightEditField.Value;            
        end

        % Button pushed function: Button_1
        function Button_1Pushed(app, event)
            creat_signal(app,1,1);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key 1"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_2
        function Button_2Pushed(app, event)
            creat_signal(app,1,2);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key 2";
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_3
        function Button_3Pushed(app, event)
            creat_signal(app,1,3);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key 3"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_A
        function Button_APushed(app, event)
            creat_signal(app,1,4);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key A"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_4
        function Button_4Pushed(app, event)
            creat_signal(app,2,1);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key 4"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_5
        function Button_5Pushed(app, event)
            creat_signal(app,2,2);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key 5"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_6
        function Button_6Pushed(app, event)
            creat_signal(app,2,3);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key 6"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_B
        function Button_BPushed(app, event)
            creat_signal(app,2,4);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key B"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_7
        function Button_7Pushed(app, event)
            creat_signal(app,3,1);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key 7"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_8
        function Button_8Pushed(app, event)
            creat_signal(app,3,2);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key 8"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_9
        function Button_9Pushed(app, event)
            creat_signal(app,3,3);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key 9"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_C
        function Button_CPushed(app, event)
            creat_signal(app,3,4);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key C"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_asterisk
        function Button_asteriskPushed(app, event)
            creat_signal(app,4,1);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key *"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_0
        function Button_0Pushed(app, event)
            creat_signal(app,4,2);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key 0"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_pound
        function Button_poundPushed(app, event)
            creat_signal(app,4,3);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key #"; 
            pause(app.time + 0.2)
        end

        % Button pushed function: Button_D
        function Button_DPushed(app, event)
            creat_signal(app,4,4);
            add_noise(app);
            player = audioplayer(app.noisy_signal,app.fs);
            play(player)
            detect_signal(app);
            app.InputKey.Value = "key D"; 
            pause(app.time + 0.2)
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create DTMFDemoUIFigure and hide until all components are created
            app.DTMFDemoUIFigure = uifigure('Visible', 'off');
            app.DTMFDemoUIFigure.AutoResizeChildren = 'off';
            app.DTMFDemoUIFigure.Position = [100 100 762 523];
            app.DTMFDemoUIFigure.Name = 'DTMF Demo';
            app.DTMFDemoUIFigure.Resize = 'off';
            app.DTMFDemoUIFigure.SizeChangedFcn = createCallbackFcn(app, @updateAppLayout, true);

            % Create GridLayout
            app.GridLayout = uigridlayout(app.DTMFDemoUIFigure);
            app.GridLayout.ColumnWidth = {441, '1x'};
            app.GridLayout.RowHeight = {'1x'};
            app.GridLayout.ColumnSpacing = 0;
            app.GridLayout.RowSpacing = 0;
            app.GridLayout.Padding = [0 0 0 0];
            app.GridLayout.Scrollable = 'on';

            % Create LeftPanel
            app.LeftPanel = uipanel(app.GridLayout);
            app.LeftPanel.Layout.Row = 1;
            app.LeftPanel.Layout.Column = 1;

            % Create GridLayout4
            app.GridLayout4 = uigridlayout(app.LeftPanel);
            app.GridLayout4.ColumnWidth = {'1x'};
            app.GridLayout4.RowHeight = {'1x', '1x', '2x'};

            % Create UIAxes_org_signal
            app.UIAxes_org_signal = uiaxes(app.GridLayout4);
            title(app.UIAxes_org_signal, 'Original signal')
            xlabel(app.UIAxes_org_signal, '')
            ylabel(app.UIAxes_org_signal, '')
            app.UIAxes_org_signal.XLim = [0 400];
            app.UIAxes_org_signal.Layout.Row = 1;
            app.UIAxes_org_signal.Layout.Column = 1;

            % Create UIAxes2_noisy_signal
            app.UIAxes2_noisy_signal = uiaxes(app.GridLayout4);
            title(app.UIAxes2_noisy_signal, 'Noisy signal')
            xlabel(app.UIAxes2_noisy_signal, '')
            ylabel(app.UIAxes2_noisy_signal, '')
            app.UIAxes2_noisy_signal.XLim = [0 400];
            app.UIAxes2_noisy_signal.Layout.Row = 2;
            app.UIAxes2_noisy_signal.Layout.Column = 1;

            % Create UIAxes3_freq
            app.UIAxes3_freq = uiaxes(app.GridLayout4);
            title(app.UIAxes3_freq, 'Frequency domain')
            xlabel(app.UIAxes3_freq, 'f/Hz')
            ylabel(app.UIAxes3_freq, '')
            app.UIAxes3_freq.XLim = [0 2300];
            app.UIAxes3_freq.Layout.Row = 3;
            app.UIAxes3_freq.Layout.Column = 1;

            % Create RightPanel
            app.RightPanel = uipanel(app.GridLayout);
            app.RightPanel.Layout.Row = 1;
            app.RightPanel.Layout.Column = 2;

            % Create GridLayout2
            app.GridLayout2 = uigridlayout(app.RightPanel);
            app.GridLayout2.ColumnWidth = {'1x'};

            % Create GridLayout3
            app.GridLayout3 = uigridlayout(app.GridLayout2);
            app.GridLayout3.ColumnWidth = {'1x', '1x', '1x', '1x'};
            app.GridLayout3.RowHeight = {'1x', '1x', '1x', '1x'};
            app.GridLayout3.Layout.Row = 2;
            app.GridLayout3.Layout.Column = 1;

            % Create Button_1
            app.Button_1 = uibutton(app.GridLayout3, 'push');
            app.Button_1.ButtonPushedFcn = createCallbackFcn(app, @Button_1Pushed, true);
            app.Button_1.Layout.Row = 1;
            app.Button_1.Layout.Column = 1;
            app.Button_1.Text = '1';

            % Create Button_2
            app.Button_2 = uibutton(app.GridLayout3, 'push');
            app.Button_2.ButtonPushedFcn = createCallbackFcn(app, @Button_2Pushed, true);
            app.Button_2.Layout.Row = 1;
            app.Button_2.Layout.Column = 2;
            app.Button_2.Text = '2';

            % Create Button_3
            app.Button_3 = uibutton(app.GridLayout3, 'push');
            app.Button_3.ButtonPushedFcn = createCallbackFcn(app, @Button_3Pushed, true);
            app.Button_3.Layout.Row = 1;
            app.Button_3.Layout.Column = 3;
            app.Button_3.Text = '3';

            % Create Button_A
            app.Button_A = uibutton(app.GridLayout3, 'push');
            app.Button_A.ButtonPushedFcn = createCallbackFcn(app, @Button_APushed, true);
            app.Button_A.Layout.Row = 1;
            app.Button_A.Layout.Column = 4;
            app.Button_A.Text = 'A';

            % Create Button_4
            app.Button_4 = uibutton(app.GridLayout3, 'push');
            app.Button_4.ButtonPushedFcn = createCallbackFcn(app, @Button_4Pushed, true);
            app.Button_4.Layout.Row = 2;
            app.Button_4.Layout.Column = 1;
            app.Button_4.Text = '4';

            % Create Button_5
            app.Button_5 = uibutton(app.GridLayout3, 'push');
            app.Button_5.ButtonPushedFcn = createCallbackFcn(app, @Button_5Pushed, true);
            app.Button_5.Layout.Row = 2;
            app.Button_5.Layout.Column = 2;
            app.Button_5.Text = '5';

            % Create Button_6
            app.Button_6 = uibutton(app.GridLayout3, 'push');
            app.Button_6.ButtonPushedFcn = createCallbackFcn(app, @Button_6Pushed, true);
            app.Button_6.Layout.Row = 2;
            app.Button_6.Layout.Column = 3;
            app.Button_6.Text = '6';

            % Create Button_B
            app.Button_B = uibutton(app.GridLayout3, 'push');
            app.Button_B.ButtonPushedFcn = createCallbackFcn(app, @Button_BPushed, true);
            app.Button_B.Layout.Row = 2;
            app.Button_B.Layout.Column = 4;
            app.Button_B.Text = 'B';

            % Create Button_7
            app.Button_7 = uibutton(app.GridLayout3, 'push');
            app.Button_7.ButtonPushedFcn = createCallbackFcn(app, @Button_7Pushed, true);
            app.Button_7.Layout.Row = 3;
            app.Button_7.Layout.Column = 1;
            app.Button_7.Text = '7';

            % Create Button_8
            app.Button_8 = uibutton(app.GridLayout3, 'push');
            app.Button_8.ButtonPushedFcn = createCallbackFcn(app, @Button_8Pushed, true);
            app.Button_8.Layout.Row = 3;
            app.Button_8.Layout.Column = 2;
            app.Button_8.Text = '8';

            % Create Button_9
            app.Button_9 = uibutton(app.GridLayout3, 'push');
            app.Button_9.ButtonPushedFcn = createCallbackFcn(app, @Button_9Pushed, true);
            app.Button_9.Layout.Row = 3;
            app.Button_9.Layout.Column = 3;
            app.Button_9.Text = '9';

            % Create Button_C
            app.Button_C = uibutton(app.GridLayout3, 'push');
            app.Button_C.ButtonPushedFcn = createCallbackFcn(app, @Button_CPushed, true);
            app.Button_C.Layout.Row = 3;
            app.Button_C.Layout.Column = 4;
            app.Button_C.Text = 'C';

            % Create Button_asterisk
            app.Button_asterisk = uibutton(app.GridLayout3, 'push');
            app.Button_asterisk.ButtonPushedFcn = createCallbackFcn(app, @Button_asteriskPushed, true);
            app.Button_asterisk.Layout.Row = 4;
            app.Button_asterisk.Layout.Column = 1;
            app.Button_asterisk.Text = '*';

            % Create Button_0
            app.Button_0 = uibutton(app.GridLayout3, 'push');
            app.Button_0.ButtonPushedFcn = createCallbackFcn(app, @Button_0Pushed, true);
            app.Button_0.Layout.Row = 4;
            app.Button_0.Layout.Column = 2;
            app.Button_0.Text = '0';

            % Create Button_pound
            app.Button_pound = uibutton(app.GridLayout3, 'push');
            app.Button_pound.ButtonPushedFcn = createCallbackFcn(app, @Button_poundPushed, true);
            app.Button_pound.Layout.Row = 4;
            app.Button_pound.Layout.Column = 3;
            app.Button_pound.Text = '#';

            % Create Button_D
            app.Button_D = uibutton(app.GridLayout3, 'push');
            app.Button_D.ButtonPushedFcn = createCallbackFcn(app, @Button_DPushed, true);
            app.Button_D.Layout.Row = 4;
            app.Button_D.Layout.Column = 4;
            app.Button_D.Text = 'D';

            % Create Panel
            app.Panel = uipanel(app.GridLayout2);
            app.Panel.Title = 'Panel';
            app.Panel.Layout.Row = 1;
            app.Panel.Layout.Column = 1;

            % Create SetSNRdBLabel
            app.SetSNRdBLabel = uilabel(app.Panel);
            app.SetSNRdBLabel.FontWeight = 'bold';
            app.SetSNRdBLabel.Position = [15 174 76 22];
            app.SetSNRdBLabel.Text = 'Set SNR (dB)';

            % Create SetSNRdB
            app.SetSNRdB = uieditfield(app.Panel, 'numeric');
            app.SetSNRdB.ValueChangedFcn = createCallbackFcn(app, @SetSNRdBValueChanged, true);
            app.SetSNRdB.FontWeight = 'bold';
            app.SetSNRdB.Tooltip = {'Set SNRdB value'};
            app.SetSNRdB.Position = [106 174 56 22];

            % Create InputEditFieldLabel
            app.InputEditFieldLabel = uilabel(app.Panel);
            app.InputEditFieldLabel.Position = [9 88 40 22];
            app.InputEditFieldLabel.Text = 'Input';

            % Create InputKey
            app.InputKey = uieditfield(app.Panel, 'text');
            app.InputKey.Editable = 'off';
            app.InputKey.HorizontalAlignment = 'right';
            app.InputKey.Tooltip = {'Display input key'};
            app.InputKey.Position = [84 88 56 22];

            % Create DetectedLabel
            app.DetectedLabel = uilabel(app.Panel);
            app.DetectedLabel.Position = [160 88 67 22];
            app.DetectedLabel.Text = 'Detected';

            % Create DetectedKey
            app.DetectedKey = uieditfield(app.Panel, 'text');
            app.DetectedKey.Editable = 'off';
            app.DetectedKey.HorizontalAlignment = 'right';
            app.DetectedKey.Tooltip = {'Display detected key'};
            app.DetectedKey.Position = [232 88 58 22];

            % Create f_lowHzLabel
            app.f_lowHzLabel = uilabel(app.Panel);
            app.f_lowHzLabel.Position = [9 58 61 22];
            app.f_lowHzLabel.Text = 'f_low (Hz)';

            % Create f_low
            app.f_low = uieditfield(app.Panel, 'numeric');
            app.f_low.Editable = 'off';
            app.f_low.Position = [84 58 56 22];

            % Create f_highHzLabel
            app.f_highHzLabel = uilabel(app.Panel);
            app.f_highHzLabel.Position = [9 29 67 22];
            app.f_highHzLabel.Text = 'f_high (Hz)';

            % Create f_high
            app.f_high = uieditfield(app.Panel, 'numeric');
            app.f_high.Editable = 'off';
            app.f_high.Position = [84 29 56 22];

            % Create f_lowHzEditFieldLabel
            app.f_lowHzEditFieldLabel = uilabel(app.Panel);
            app.f_lowHzEditFieldLabel.Position = [160 58 62 22];
            app.f_lowHzEditFieldLabel.Text = 'f_low'' (Hz)';

            % Create f_lowHzEditField
            app.f_lowHzEditField = uieditfield(app.Panel, 'numeric');
            app.f_lowHzEditField.Editable = 'off';
            app.f_lowHzEditField.Position = [232 58 57 22];

            % Create f_highHzEditFieldLabel
            app.f_highHzEditFieldLabel = uilabel(app.Panel);
            app.f_highHzEditFieldLabel.Position = [160 28 67 22];
            app.f_highHzEditFieldLabel.Text = 'f_high'' (Hz)';

            % Create f_highHzEditField
            app.f_highHzEditField = uieditfield(app.Panel, 'numeric');
            app.f_highHzEditField.Editable = 'off';
            app.f_highHzEditField.Position = [232 28 57 22];

            % Create MinPkHeightLabel
            app.MinPkHeightLabel = uilabel(app.Panel);
            app.MinPkHeightLabel.FontWeight = 'bold';
            app.MinPkHeightLabel.Position = [15 144 82 22];
            app.MinPkHeightLabel.Text = 'MinPkHeight.';

            % Create MinPkHeightEditField
            app.MinPkHeightEditField = uieditfield(app.Panel, 'numeric');
            app.MinPkHeightEditField.ValueChangedFcn = createCallbackFcn(app, @MinPkHeightEditFieldValueChanged, true);
            app.MinPkHeightEditField.FontWeight = 'bold';
            app.MinPkHeightEditField.Position = [106 144 56 22];

            % Create AlgorithmsButtonGroup
            app.AlgorithmsButtonGroup = uibuttongroup(app.Panel);
            app.AlgorithmsButtonGroup.Title = 'Algorithms';
            app.AlgorithmsButtonGroup.Position = [183 135 100 71];

            % Create fftButton
            app.fftButton = uiradiobutton(app.AlgorithmsButtonGroup);
            app.fftButton.Text = 'fft';
            app.fftButton.Position = [11 25 58 22];
            app.fftButton.Value = true;

            % Create goertzelButton
            app.goertzelButton = uiradiobutton(app.AlgorithmsButtonGroup);
            app.goertzelButton.Text = 'goertzel';
            app.goertzelButton.Position = [11 3 65 22];

            % Show the figure after all components are created
            app.DTMFDemoUIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = dtmf

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.DTMFDemoUIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.DTMFDemoUIFigure)
        end
    end
end]]></w:t>
            </w:r>
        </w:p>
    </w:body>
</w:document>